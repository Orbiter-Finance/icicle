name: Build

on:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  ARCH_TYPE: sm_70
  LD_LIBRARY_PATH: $GITHUB_WORKSPACE/goicicle

jobs:
  build-rust-linux:
    runs-on: [self-hosted, Linux, X64, icicle]
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: Build Rust
      run: cargo build --release --verbose

  test-rust-linux:
    needs: build-rust-linux
    runs-on: [self-hosted, Linux, X64, icicle]
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: Run Rust Tests
      run: cargo test --release --verbose

  formatting-rust:
    name: Check Code Formatting
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Check rustfmt
      run: if [[ $(cargo fmt --check) ]]; then echo "Please run cargo fmt"; exit 1; fi
    # - name: Check clippy
    #   run: cargo clippy --no-deps --all-features --all-targets

  build-rust-windows:
    runs-on: windows-2022
    steps:     
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: Download and Install Cuda
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '12.0.0'
        method: 'network'
        # https://docs.nvidia.com/cuda/archive/12.0.0/cuda-installation-guide-microsoft-windows/index.html
        sub-packages: '["cudart", "nvcc", "thrust"]'
    - name: Build Rust Targets
      run: cargo build --release --verbose

  test-golang-linux:
    runs-on: [self-hosted, Linux, X64, icicle]
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: Build cpp libs
      run: cd goicicle && make all
    - name: Run Golang Tests
      run: go test ./...

  formatting-golang:
    name: Check Code Formatting
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Check gofmt
      run: if [[ $(go list ./... | xargs go fmt) ]]; then echo "Please run go fmt"; exit 1; fi

  build-golang-windows:
    runs-on: windows-2022
    steps:     
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: Download and Install Cuda
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '12.0.0'
        method: 'network'
        # https://docs.nvidia.com/cuda/archive/12.0.0/cuda-installation-guide-microsoft-windows/index.html
        sub-packages: '["cudart", "nvcc", "thrust"]'
    - name: Build cpp libs
      run: cd goicicle && make all
